cmake_minimum_required(VERSION 3.22)
project(raytracer)

# Set C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Enable generation of compile_commands.json
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Add executable
add_executable(raytracer src/main.cpp)

# After enabling CMAKE_EXPORT_COMPILE_COMMANDS and defining your executable

# Add a custom target to make compile_commands.json paths relative
add_custom_target(
    make_compile_commands_relative
    COMMAND ${CMAKE_COMMAND} -E env python3
        ${CMAKE_SOURCE_DIR}/make_compile_commands_relative.py
        ${CMAKE_BINARY_DIR}/compile_commands.json
        ${CMAKE_SOURCE_DIR}
    DEPENDS ${CMAKE_BINARY_DIR}/compile_commands.json ${CMAKE_SOURCE_DIR}/make_compile_commands_relative.py
    COMMENT "Converting compile_commands.json to use relative paths"
)

# Ensure that this target runs after CMake generates compile_commands.json
add_dependencies(raytracer make_compile_commands_relative)

# Specify include directories using relative paths
target_include_directories(raytracer 
    PRIVATE 
        ${CMAKE_SOURCE_DIR}/rtutils/inc
        ${CMAKE_SOURCE_DIR}/src/include # Add if you have additional includes
)

# Link libraries if any
# target_link_libraries(raytracer PRIVATE rtutils)